name: Build JavaFX Runtime - Windows

# This workflow will run manually from the GitHub Actions tab.
on:
  workflow_dispatch:

# Define environment variables for easy updates
env:
  JAVAFX_VERSION: 24.0.2
  # Explicitly list the most common JavaFX modules to avoid jlink errors
  JAVAFX_MODULES: "javafx.controls,javafx.fxml,javafx.graphics,javafx.media,javafx.web,javafx.swing"

jobs:
  build-windows-runtime:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install Java 24 as requested
      - name: Setup Java 24
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 24

      # Download and extract the JavaFX JMODs and SDK into temporary directories
      - name: Download and extract JavaFX files
        shell: pwsh
        run: |
          Write-Host "Downloading JavaFX JMODs for version ${{ env.JAVAFX_VERSION }}"
          Invoke-WebRequest -Uri "https://download2.gluonhq.com/openjfx/${{ env.JAVAFX_VERSION }}/openjfx-${{ env.JAVAFX_VERSION }}_windows-x64_bin-jmods.zip" -OutFile "javafx-jmods.zip"
          Expand-Archive "javafx-jmods.zip" -DestinationPath "javafx-jmods-temp"

          Write-Host "Downloading JavaFX SDK for version ${{ env.JAVAFX_VERSION }}"
          Invoke-WebRequest -Uri "https://download2.gluonhq.com/openjfx/${{ env.JAVAFX_VERSION }}/openjfx-${{ env.JAVAFX_VERSION }}_windows-x64_bin-sdk.zip" -OutFile "javafx-sdk.zip"
          Expand-Archive "javafx-sdk.zip" -DestinationPath "javafx-sdk-temp"

      # Correct the directory structure for both JMODs and the SDK
      # This step moves the nested folders to a flat structure.
      - name: Correct directory structure
        shell: pwsh
        run: |
          # Move JMODs to the correct top-level directory
          New-Item -ItemType Directory -Force -Path "javafx-jmods"
          Copy-Item -Path "javafx-jmods-temp/javafx-jmods-${{ env.JAVAFX_VERSION }}/*" -Destination "javafx-jmods" -Recurse -Force
          Remove-Item -Recurse -Force "javafx-jmods-temp"

          # Move SDK files to the correct top-level directory
          New-Item -ItemType Directory -Force -Path "javafx-sdk"
          Copy-Item -Path "javafx-sdk-temp/javafx-sdk-${{ env.JAVAFX_VERSION }}/*" -Destination "javafx-sdk" -Recurse -Force
          Remove-Item -Recurse -Force "javafx-sdk-temp"

      # Build the custom runtime using jlink with the explicit module list
      - name: Create custom JavaFX runtime
        shell: pwsh
        run: |
          $runtimeDir = "javafx-runtime"
          Remove-Item -Recurse -Force $runtimeDir -ErrorAction SilentlyContinue

          jlink `
            --module-path "javafx-jmods;$env:JAVA_HOME\jmods" `
            --add-modules ${{ env.JAVAFX_MODULES }} `
            --output $runtimeDir `
            --compress 2 `
            --strip-debug `
            --no-header-files `
            --no-man-pages

      # Copy the JDK binaries (like java.exe) to the runtime's bin directory
      # This is a new and essential step to make the runtime self-contained.
      - name: Copy JDK executables
        shell: pwsh
        run: |
          Copy-Item -Path "$env:JAVA_HOME/bin/*" -Destination "javafx-runtime/bin" -Recurse -Force
          
      # Copy native libraries from the SDK, which jlink does not include
      - name: Copy JavaFX SDK native libraries
        shell: pwsh
        run: |
          # The path is now corrected to look inside the flattened directory structure
          Copy-Item -Path "javafx-sdk/lib/*" -Destination "javafx-runtime/bin" -Recurse -Force

      # Package the final runtime into a zip file
      - name: Package runtime
        run: |
          Compress-Archive -Path "javafx-runtime\*" -DestinationPath "javafx-runtime-windows.zip"

      # Upload the zip file as a workflow artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: javafx-runtime-windows
          path: javafx-runtime-windows.zip
